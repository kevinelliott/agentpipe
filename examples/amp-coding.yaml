# AgentPipe Configuration - Amp Coding Agent Example
#
# This example demonstrates how to use the Amp coding agent for
# collaborative software development conversations.
#
# Prerequisites:
# - Install Amp CLI: https://ampcode.com/install
# - Authenticate: Follow instructions from Amp documentation
#
# Usage:
#   agentpipe run -c examples/amp-coding.yaml

version: "1.0"

orchestrator:
  mode: round-robin
  max_turns: 20
  turn_timeout: 60s
  response_delay: 2s
  initial_prompt: "Let's design a new REST API for a todo list application. What should the endpoints be?"

agents:
  - id: amp-architect
    name: "Amp Architect"
    type: amp
    prompt: |
      You are an experienced software architect specializing in system design.
      Focus on high-level architecture, design patterns, and best practices.
      When discussing code, consider scalability, maintainability, and performance.
    announcement: "üèóÔ∏è Amp Architect has joined the conversation"
    model: claude-sonnet-4.5

  - id: amp-developer
    name: "Amp Developer"
    type: amp
    prompt: |
      You are a practical software developer who writes clean, well-tested code.
      Focus on implementation details, code quality, and testing strategies.
      Provide concrete code examples and discuss trade-offs.
    announcement: "üíª Amp Developer is ready to code"
    model: claude-sonnet-4.5

logging:
  enabled: true
  chat_log_dir: ~/.agentpipe/chats
  console_output: true
  log_format: text

# Amp CLI Features:
#
# The Amp agent adapter uses thread management for efficient conversations:
#   amp thread new          - Creates a new conversation thread
#   amp thread continue {id} - Continues an existing thread
#
# Smart message filtering:
# - AgentPipe only sends NEW messages from OTHER agents to Amp
# - Amp's own responses are NOT sent back to it (it already knows what it said)
# - Only messages from other agents and system messages are forwarded
#
# Benefits:
# - Faster response times (minimal data transfer)
# - Lower API costs (no redundant token usage)
# - Better conversation context management (Amp maintains state server-side)
#
# For streaming output, it uses:
#   amp thread new --stream-json
#   amp thread continue {id} --stream-json
#
# Amp provides:
# - Advanced code generation and editing
# - Context-aware programming assistance
# - Integration with VS Code, Cursor, and other IDEs
# - Complex task execution capabilities
#
# Learn more: https://ampcode.com/manual#cli
